Friday:

Today I started by outlining the basic use cases for the eventual
burger tracker site, and then scribbled down what classes I need
and what their likely attributes and methods would be, and turned
that into an initial class diagram, which is likely to change.

Then I filled in all of the CRUD methods for each of the classes
that needed them. Next was to put in a few methods I'd identified
in the class diagram - find_burgers and find_deals in the eatery
class.

The next thing to do is to find all the burgers currently related
to a specific deal. This might need a join table (ie burger_deal),
or I could add an attribute to burger, deal_id, but not all burgers
will be a part of a deal at all times. A join table might be best.

UPDATE:

I have created a function in Deal.rb which inner joins from
burgers and deals on their ids, to get the ids of all of the
classes in one result. From this, I will be able to create a
view which cycles through each class looking for those ids
and where they match, and then display them organised in some
format via HTML/CSS.

Sunday:

Have added a lot to the views today, got basic structure of
website established. The list all page is currently missing
days for the deals, because I haven't written a function to get
them yet.

Quite a messy day, it is likely the way I approached it at first
is the reason. I did not use a separate joining class to get all
of the data, so now most of those 'find' functions are in burgers.

Needs a lot more work still.

Next thing to do is to make sure all of the New pages work and
properly add rows to the db for their respective tables.

Then I need to make sure these are searchable and will show up
on the list all page. After this, I can worry about the savings
calculation extension and anything else I might want to add,
including a better look for the site.

Monday, 8:30pm:

Managed to untangle the mess from yesterday and get the MVP functionality
working - adding burgers, eateries, deals and linking them all works.
Deals don't currently have any actual effect beyond linking to the other
classes - this is the last extension I need to work on.

The db is filterable by eatery (shows all burgers associated with it)
and by day (shows all deals on a selected day in all eateries). There
is also an erb which simply lists every deal on all days - although
not burgers that don't have deals (this is acceptable).

Remaining is to tighten up the deal creation - it might not need as
much information as it is getting, since it is gotten again in the
link and I think this is creating doubles. Then to add a calculate
discount function and possibly different types of deals it is possible
to add.

After that a bit more styling and it is finished. I did some of that
today in the process of working on other things.

Tuesday 2pm:

The structure of the classes now bear little resemblance to
the initial class diagram I made out. The views are built on
the basic sketch wireframe I did at the start, though, and
the use case diagram has been more than fulfilled.

At this point the project is complete, and I can add a couple
more features on it if I want to. Everything works the way it
should and it is styled. The only obvious thing I haven't included,
although it wasn't in the spec, is an implementation of the update
function. It is in the CRUD for every class, it just isn't present
in the views right now.
